#!/usr/bin/env node

/**
 * AstroBits Core - MCP Test Components
 * 
 * This script generates test components from different MCP servers
 * to verify they're working correctly.
 */

const fs = require('fs');
const path = require('path');

// ANSI color codes for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m'
};

// Test components to generate
const testComponents = {
  'shadcn-ui-button': {
    name: 'Shadcn/UI Button',
    description: 'Basic button component',
    content: `import { Button } from "@/components/ui/button"

export default function TestButton() {
  return (
    <div className="p-4 space-y-4">
      <h2 className="text-2xl font-bold">Shadcn/UI Button Test</h2>
      <div className="space-x-4">
        <Button variant="default">Default Button</Button>
        <Button variant="destructive">Destructive Button</Button>
        <Button variant="outline">Outline Button</Button>
        <Button variant="secondary">Secondary Button</Button>
        <Button variant="ghost">Ghost Button</Button>
        <Button variant="link">Link Button</Button>
      </div>
    </div>
  )
}`
  },
  'aceternity-ui-card': {
    name: 'Aceternity UI Card',
    description: 'Animated card component',
    content: `"use client";
import { CardBody, CardContainer, CardItem } from "@/components/ui/3d-card";

export default function TestCard() {
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">Aceternity UI Card Test</h2>
      <CardContainer className="inter-var">
        <CardBody className="bg-gray-50 relative group/card dark:hover:shadow-2xl dark:hover:shadow-emerald-500/[0.1] dark:bg-black dark:border-white/[0.2] border-black/[0.1] w-auto sm:w-[30rem] h-auto rounded-xl p-6 border">
          <CardItem
            translateZ="50"
            className="text-xl font-bold text-neutral-600 dark:text-white"
          >
            Animated Card
          </CardItem>
          <CardItem
            as="p"
            translateZ="60"
            className="text-neutral-500 text-sm max-w-sm mt-2 dark:text-neutral-300"
          >
            This is a test card with floating animations from Aceternity UI.
          </CardItem>
          <CardItem translateZ="100" className="w-full mt-4">
            <button className="px-4 py-2 rounded-xl text-xs font-normal dark:text-white">
              Try now →
            </button>
          </CardItem>
        </CardBody>
      </CardContainer>
    </div>
  );
}`
  },
  'magic-ui-hero': {
    name: 'Magic UI Hero',
    description: 'Hero section component',
    content: `export default function TestHero() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900 flex items-center justify-center">
      <div className="text-center text-white p-8">
        <h1 className="text-6xl font-bold mb-6 bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
          Magic UI Hero
        </h1>
        <p className="text-xl mb-8 text-gray-300 max-w-2xl mx-auto">
          This is a test hero section that would typically be generated by Magic UI.
          It showcases the kind of complex layouts and designs that Magic UI can create.
        </p>
        <div className="space-x-4">
          <button className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors">
            Get Started
          </button>
          <button className="border border-white text-white hover:bg-white hover:text-black font-bold py-3 px-6 rounded-lg transition-colors">
            Learn More
          </button>
        </div>
      </div>
    </div>
  );
}`
  }
};

// Main function to generate test components
async function generateTestComponents() {
  console.log(`${colors.bright}${colors.cyan}🧪 AstroBits Core - MCP Test Components${colors.reset}`);
  console.log(`${colors.cyan}═══════════════════════════════════════════════════════════════${colors.reset}\n`);

  // Create test components directory
  const testDir = path.join(process.cwd(), 'test-components');
  if (!fs.existsSync(testDir)) {
    fs.mkdirSync(testDir, { recursive: true });
  }

  let generatedCount = 0;

  // Generate each test component
  for (const [key, component] of Object.entries(testComponents)) {
    try {
      const fileName = `${key}.tsx`;
      const filePath = path.join(testDir, fileName);
      
      fs.writeFileSync(filePath, component.content);
      
      console.log(`${colors.green}✅${colors.reset} Generated ${colors.bright}${component.name}${colors.reset}`);
      console.log(`   📁 ${colors.blue}${filePath}${colors.reset}`);
      console.log(`   📝 ${component.description}\n`);
      
      generatedCount++;
    } catch (error) {
      console.log(`${colors.red}❌${colors.reset} Failed to generate ${colors.bright}${component.name}${colors.reset}`);
      console.log(`   ${colors.red}Error: ${error.message}${colors.reset}\n`);
    }
  }

  // Create index file
  const indexContent = `// Test Components Generated by AstroBits Core MCP System
// These components demonstrate the capabilities of different MCP servers

export { default as TestButton } from './shadcn-ui-button';
export { default as TestCard } from './aceternity-ui-card';
export { default as TestHero } from './magic-ui-hero';

// Usage:
// import { TestButton, TestCard, TestHero } from './test-components';
`;

  try {
    const indexPath = path.join(testDir, 'index.ts');
    fs.writeFileSync(indexPath, indexContent);
    console.log(`${colors.green}✅${colors.reset} Generated ${colors.bright}index.ts${colors.reset}`);
    console.log(`   📁 ${colors.blue}${indexPath}${colors.reset}\n`);
  } catch (error) {
    console.log(`${colors.red}❌${colors.reset} Failed to generate index file`);
    console.log(`   ${colors.red}Error: ${error.message}${colors.reset}\n`);
  }

  // Summary
  console.log(`${colors.bright}${colors.cyan}📊 Test Components Summary${colors.reset}`);
  console.log(`${colors.cyan}═══════════════════════════════════════════════════════════════${colors.reset}`);
  console.log(`✅ Generated: ${colors.green}${generatedCount}${colors.reset} components`);
  console.log(`📁 Location: ${colors.blue}${testDir}${colors.reset}`);
  console.log(`🎯 Purpose: Test MCP server functionality\n`);

  // Instructions
  console.log(`${colors.bright}${colors.yellow}🚀 Next Steps${colors.reset}`);
  console.log(`${colors.yellow}═══════════════════════════════════════════════════════════════${colors.reset}`);
  console.log(`1. Review the generated components in ${colors.blue}${testDir}${colors.reset}`);
  console.log(`2. Import and use them in your app to test MCP server functionality`);
  console.log(`3. Run ${colors.cyan}npm run mcp:health${colors.reset} to check server status`);
  console.log(`4. Customize the components to match your project needs\n`);

  return {
    generatedCount,
    testDir,
    components: Object.keys(testComponents)
  };
}

// Run the test component generation if this script is executed directly
if (require.main === module) {
  generateTestComponents().catch(console.error);
}

module.exports = { generateTestComponents, testComponents };
